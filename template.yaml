AWSTemplateFormatVersion: '2010-09-09'

Transform: AWS::Serverless-2016-10-31

Description: Deploys the Python-Flask Web App and API gateway used to put a user interface on automated Deep Racer Model upload.

Parameters:

  Vpc:
    Type: AWS::EC2::VPC::Id

  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>

  PrivateSubnets:
    Type: List<AWS::EC2::Subnet::Id>

  HostedZoneName:
    Description: The Route53 hosted zone name to use.
    Type: String
    AllowedPattern: '^[a-z0-9\-\.]+[^\.]$'
    ConstraintDescription: 'Must be a valid domain name string and also must NOT end in a full stop.'

  HostedZoneId:
    Description: The Route53 hosted id (must match the HostedZoneName).
    Type: AWS::Route53::HostedZone::Id

  DeployS3Trigger:
    Type: String
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'No'

Conditions:

  S3Trigger: !Equals [!Ref DeployS3Trigger, 'Yes']

Resources:

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties: 
      DomainName: !Ref HostedZoneName
      DomainValidationOptions: 
        - DomainName: !Ref HostedZoneName
          HostedZoneId: !Ref HostedZoneId
      SubjectAlternativeNames: 
        - !Sub '*.${HostedZoneName}'
      ValidationMethod: DNS

  SQSQueue:
    Type: AWS::SQS::Queue

  SQSQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref SQSQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Resource:
              - !GetAtt SQSQueue.Arn
            Principal:
              Service: s3.amazonaws.com
            Condition:
              ArnLike:
                'aws:SourceArn': !Sub 'arn:aws:s3:*:*:${ModelData}'

  ModelData:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      NotificationConfiguration: !If
        - S3Trigger
        - QueueConfigurations:
            - Queue: !GetAtt SQSQueue.Arn
              Event: 's3:ObjectCreated:*'
            - Queue: !GetAtt SQSQueue.Arn
              Event: 's3:ObjectRemoved:*'
        - !Ref AWS::NoValue
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: No logging required

  CodePipelineBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub codepipeline-${AWS::AccountId}-${AWS::Region}-${AWS::StackName}
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: Access logging deliberately not enabled.
          - id: W41
            reason: Encryption deliberately not enabled.

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CodePipelineBucket
      PolicyDocument:
        Statement:
          - Sid: DenyUnEncryptedObjectUploads
            Principal: '*'
            Effect: Deny
            Action:
              - s3:PutObject
            Resource:
              - !Sub 'arn:aws:s3:::${CodePipelineBucket}/*'
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': 'aws:kms'
          - Sid: DenyInsecureConnections
            Principal: '*'
            Effect: Deny
            Action:
              - s3:*
            Resource:
              - !Sub 'arn:aws:s3:::${CodePipelineBucket}/*'
            Condition:
              Bool:
                'aws:SecureTransport': False

  ServerlessApi:
    Type: AWS::Serverless::Api
    Properties:
      Auth:
        ApiKeyRequired: True
      EndpointConfiguration: REGIONAL
      StageName: Prod
      TracingEnabled: True

  ModelsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Handler: app.lambda_handler
      MemorySize: 128
      Timeout: 900
      Tracing: Active
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - sts:AssumeRole
              Resource:
                - '*'
            - Effect: Allow
              Action:
                - s3:ListBucket
                - s3:GetObject
                - s3:PutObject
                - s3:DeleteObject
              Resource:
                - !Sub 'arn:aws:s3:::${ModelData}'
                - !Sub 'arn:aws:s3:::${ModelData}/*'
      Environment:
        Variables:
          DESTINATION_BUCKET: !Ref ModelData
      CodeUri: ./functions/api_models/
      Events:
        ListModels:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /models
            Method: GET
            RequestParameters:
            - method.request.querystring.RoleArn:
                Required: True
                Caching: False
            - method.request.querystring.Region:
                Required: False
                Caching: False
        CopyModel:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /models/{Region}/{JobId}
            Method: GET
            RequestParameters:
            - method.request.querystring.RoleArn:
                Required: True
                Caching: False
        DeleteModel:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessApi
            Path: /models/{Region}/{JobId}
            Method: DELETE
            RequestParameters:
            - method.request.querystring.RoleArn:
                Required: True
                Caching: False

  FargateCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value:  enabled

  SecurityGroupAlb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref Vpc
      SecurityGroupIngress:
          - Description: Internet http access
            CidrIp: 0.0.0.0/0
            FromPort: 443
            ToPort: 443
            IpProtocol: tcp
      SecurityGroupEgress:
          - Description: https outbound for Cognito
            CidrIp: 0.0.0.0/0
            FromPort: 443
            ToPort: 443
            IpProtocol: tcp
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W2
            reason: Inbound access desired to be from internet.
          - id: W9
            reason: Inbound access desired to be from internet.
          - id: W5
            reason: Fulle https outbound required for Cognito.

  SecurityGroupEcs:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the containers
      VpcId: !Ref Vpc
      SecurityGroupEgress:
          - Description: All outbound
            CidrIp: 0.0.0.0/0
            IpProtocol: '-1'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W5
            reason: All protocols desired for outbound traffic.
          - id: W40
            reason: All protocols desired for outbound traffic.

  SecurityGroupAlbEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref SecurityGroupAlb
      Description: Outbound to ECS
      DestinationSecurityGroupId: !Ref SecurityGroupEcs
      IpProtocol: tcp
      FromPort: 5000
      ToPort: 5000

  SecurityGroupEcsIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupEcs
      Description: Inbound from ALB
      SourceSecurityGroupId: !Ref SecurityGroupAlb
      IpProtocol: tcp
      FromPort: 5000
      ToPort: 5000

  SecurityGroupEcsIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupEcs
      Description: Loopback for X-ray
      SourceSecurityGroupId: !Ref SecurityGroupEcs
      IpProtocol: udp
      FromPort: 2000
      ToPort: 2000

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets: !Ref PublicSubnets
      SecurityGroups:
        - !Ref SecurityGroupAlb
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'

  RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub ${HostedZoneName}.
      Type: A
      HostedZoneName: !Sub ${HostedZoneName}.
      AliasTarget:
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt LoadBalancer.DNSName
        EvaluateTargetHealth: True

  TargetGroupBlue:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      Protocol: HTTP
      Port: 5000
      TargetType: ip
      VpcId: !Ref Vpc
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '5'
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 2
      HealthCheckIntervalSeconds: 5
      Matcher:
        HttpCode: '200'

  TargetGroupGreen:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      Protocol: HTTP
      Port: 5000
      TargetType: ip
      VpcId: !Ref Vpc
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '5'
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 2
      HealthCheckIntervalSeconds: 5
      Matcher:
        HttpCode: '200'

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: True
          RequireNumbers: True
          RequireSymbols: True
          RequireUppercase: True
          TemporaryPasswordValidityDays: 7
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: True
        InviteMessageTemplate:
          EmailSubject: Your access to the Deep Racer Model Uploader application.
          EmailMessage: !Sub |
            Please use this link to access the application from your browser:
            <a href="https://${HostedZoneName}">https://${HostedZoneName}</a>

            Your username is {username} and temporary password is {####}.
            You will be asked to change your password when you first login.
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: False
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Priority: 1
            Name: verified_email

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      GenerateSecret: True
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - !Sub https://${LoadBalancer.DNSName}/oauth2/idpresponse
        - !Sub https://${HostedZoneName}/oauth2/idpresponse
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
      AllowedOAuthFlowsUserPoolClient: True
      PreventUserExistenceErrors: ENABLED

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Select [2, !Split ['/', !Ref 'AWS::StackId']]

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTPS
      Port: 443
      Certificates:
        - CertificateArn: !Ref Certificate
      SslPolicy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06
      DefaultActions:
        - Order: 10
          Type: authenticate-cognito
          AuthenticateCognitoConfig:
            UserPoolArn: !GetAtt UserPool.Arn
            UserPoolClientId: !Ref UserPoolClient
            UserPoolDomain: !Ref UserPoolDomain
        - Order: 20
          Type: forward
          TargetGroupArn: !Ref TargetGroupBlue

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: /ecs/deepracer-event-webapp
      RetentionInDays: 7

  EcsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: The ECS Execution IAM Role
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      Description: The ECS Execution IAM Role
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        - PolicyName: Access-DeepRacer-Models
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub 'arn:aws:s3:::${ModelData}'
                  - !Sub 'arn:aws:s3:::${ModelData}/*'

  EcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: '512'
      Memory: '1024'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
        - EC2
      ExecutionRoleArn: !GetAtt EcsExecutionRole.Arn
      TaskRoleArn: !GetAtt EcsTaskRole.Arn
      ContainerDefinitions:
        - Name: flask-app
          Image: danjhd/dr-event-webapp:latest
          Environment:
            - Name: WEBSERVICE_ENDPOINT
              Value: !Sub https://${ServerlessApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${ServerlessApiProdStage}
            - Name: API_KEY
              Value: !Select [2, !Split ['/', !Ref 'AWS::StackId']]
            - Name: DESTINATION_BUCKET
              Value: !Ref ModelData
            - Name: AWS_ACCOUNT_ID
              Value: !Ref AWS::AccountID
            - Name: AWS_XRAY_CONTEXT_MISSING
              Value: LOG_ERROR
          PortMappings:
            - ContainerPort: 5000
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: fargate
          Essential: True
        - Name: x-ray-daemon
          Image: amazon/aws-xray-daemon
          Cpu: 32
          MemoryReservation: 256
          PortMappings:
            - ContainerPort: 2000
              Protocol: udp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: fargate
          Essential: True

  EcsService:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      Cluster: !Ref FargateCluster
      TaskDefinition: !Ref EcsTaskDefinition
      LoadBalancers: 
        - TargetGroupArn: !Ref TargetGroupBlue
          ContainerName: flask-app
          ContainerPort: 5000
      DesiredCount: 1
      LaunchType: FARGATE
      PlatformVersion: LATEST
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      NetworkConfiguration:
        AwsvpcConfiguration: 
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref SecurityGroupEcs
          Subnets: !Ref PrivateSubnets
      HealthCheckGracePeriodSeconds: 0
      DeploymentController:
        Type: CODE_DEPLOY
      EnableECSManagedTags: True

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn: ServerlessApiProdStage
    Properties:
      Description: Key for the Flask App
      StageKeys:
        - RestApiId: !Ref ServerlessApi
          StageName: Prod
      Value: !Select [2, !Split ['/', !Ref 'AWS::StackId']]

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: ServerlessApiProdStage
    Properties:
      Description: Usage plan for Flask App
      ApiStages:
        - ApiId: !Ref ServerlessApi
          Stage: Prod

  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn: ServerlessApiProdStage
    Properties: 
      KeyType: API_KEY
      KeyId: !Ref ApiKey
      UsagePlanId: !Ref UsagePlan
